<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技術解説 on グラブル計算機の読み方</title>
    <link>https://philmist.github.io/gbcalc_source_doc/categories/%E6%8A%80%E8%A1%93%E8%A7%A3%E8%AA%AC/</link>
    <description>Recent content in 技術解説 on グラブル計算機の読み方</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 31 May 2016 19:30:27 +0900</lastBuildDate>
    <atom:link href="https://philmist.github.io/gbcalc_source_doc/categories/%E6%8A%80%E8%A1%93%E8%A7%A3%E8%AA%AC/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CSS Modulesとは何か</title>
      <link>https://philmist.github.io/gbcalc_source_doc/css_modules/</link>
      <pubDate>Tue, 31 May 2016 19:30:27 +0900</pubDate>
      
      <guid>https://philmist.github.io/gbcalc_source_doc/css_modules/</guid>
      <description>

&lt;p&gt;この文書ではスタイルを指定するのに使用している&lt;code&gt;CSS Modules&lt;/code&gt;という技術について解説します。&lt;/p&gt;

&lt;h1 id=&#34;通常のcssの問題点:aedf7103cc010e0a11d17800e6fd13b0&#34;&gt;通常のCSSの問題点&lt;/h1&gt;

&lt;p&gt;通常のCSSでは全てのスタイルがグローバルに定義されており基本的にはスコープという概念がありません。そのために、ほとんど全てのスタイルはカスケーディングされ(継承され)てしまい、名前をユニークにすることでしか区別できません。&lt;/p&gt;

&lt;p&gt;この場合、部品(コンポーネント)ごとにスタイルを分離して定義したい時に名前が重複しないかをいちいち確かめる必要があり不便になることがあります。idをいちいちユニークにするのは結構な手間です。&lt;/p&gt;

&lt;p&gt;それを解決するのがCSS Modulesです。&lt;/p&gt;

&lt;h1 id=&#34;css-modulesの考えかた:aedf7103cc010e0a11d17800e6fd13b0&#34;&gt;CSS Modulesの考えかた&lt;/h1&gt;

&lt;p&gt;CSS Modulesでは全てのスタイルがローカルなものとして定義されます。つまり名前の重複を気にする必要がありません。したがって部品ごとにスタイルを分離することが可能になります。逆に他の場所で使われているスタイルを使いたい時には明示的に引用しなければなりません。&lt;/p&gt;

&lt;p&gt;実際にCSS Modulesで書かれたコードを見てみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* tables.css */
.base {
    margin-top: 0.2em;
    margin-bottom: 0.2em;
    border-collapse: separate;
    border-spacing: 2px;
    font-size: 100%;
}

.cell_base {
    composes: base;
    padding: 3px 1px;
}

.header {
    composes: cell_base;
    border-bottom: solid 1px #B2B2B2;
    border-right: solid 1px #B2B2B2;
    background: #4D8CC9;
    text-align: center;
    white-space: nowrap;
    font-size: 92%;
    text-align: center;
}


/* summon.css */
.header {
    composes: header from &amp;quot;./tables.css&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これが基本的なCSS Modulesのコードです。&lt;code&gt;composes&lt;/code&gt;は他のファイルないし他のクラスから要素を引用することを示しています。Reactで指定して(正確には&lt;a href=&#34;https://github.com/gajus/react-css-modules&#34;&gt;react-css-modules&lt;/a&gt;を経由して)使う場合には次のようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import CSSModules from &amp;quot;react-css-modules&amp;quot;;
import styles from &amp;quot;summon.css&amp;quot;;

// 中略

class SummonTableHeader extends Component {
  render() {
    return (
      &amp;lt;tr styleName=&amp;quot;header&amp;quot;&amp;gt;
        &amp;lt;th&amp;gt;順&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;選&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;鍵&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;召喚名&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;攻撃力&amp;lt;/th&amp;gt;
        &amp;lt;th colSpan=&amp;quot;2&amp;quot;&amp;gt;加護1&amp;lt;/th&amp;gt;
        &amp;lt;th colSpan=&amp;quot;2&amp;quot;&amp;gt;加護2&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;追加・削除&amp;lt;/th&amp;gt;
      &amp;lt;/tr&amp;gt;
    );
  }
}
SummonTableHeader = CSSModules(SummonTableHeader, styles);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうするとあとはwebpackがよろしくやってくれます。&lt;/p&gt;

&lt;h1 id=&#34;どうしてもグローバルにしたい時:aedf7103cc010e0a11d17800e6fd13b0&#34;&gt;どうしてもグローバルにしたい時&lt;/h1&gt;

&lt;p&gt;どうしてもCSSのクラス等をグローバルに使いたい時もたまに存在します。そういう時は単純にアプリの大元のJavascriptファイルで何も指定せずに&lt;code&gt;import&lt;/code&gt;すれば良いです。具体的には次のようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* entry.jsx */
// 必要なスタイルシートを読みこむ
import &amp;quot;normalize.css/normalize.css&amp;quot;;
import &amp;quot;balloon-css/balloon.css&amp;quot;;
import &amp;quot;../css/mplus_webfonts.css&amp;quot;;
import &amp;quot;../css/global.css&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけです。それぞれのファイルがどういう意味合いなのかは別の文書にゆずります。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SourceTreeとGitHubを使いはじめるまで</title>
      <link>https://philmist.github.io/gbcalc_source_doc/start_to_use_github/</link>
      <pubDate>Tue, 19 Apr 2016 16:37:28 +0900</pubDate>
      
      <guid>https://philmist.github.io/gbcalc_source_doc/start_to_use_github/</guid>
      <description>

&lt;p&gt;この文書ではGitリポジトリを扱うためのツールの1つであるSourceTreeのインストールの仕方と、GitHubを使い始めるまでの手順を解説します。&lt;/p&gt;

&lt;h1 id=&#34;sourcetreeのインストール:224e1608373417cdc003004782236e65&#34;&gt;SourceTreeのインストール&lt;/h1&gt;

&lt;p&gt;まず、SourceTreeをダウンロードしてインストールしましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/sourcetree_download.png&#34; alt=&#34;SourceTreeのダウンロード&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ダウンロードしてインストールすると最終的に次のような画面になると思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/sourcetree_install_completed.png&#34; alt=&#34;SourceTreeのインストール完了&#34; /&gt;&lt;/p&gt;

&lt;p&gt;赤い枠で囲ってありますが、私個人としてはSourceTreeを実行する前に入れておきたいソフトウェアがあります。gitをコマンドプロンプトから使う時に便利な&lt;a href=&#34;https://github.com/Microsoft/Git-Credential-Manager-for-Windows&#34;&gt;Windows Credential Manager&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;まず、Windows Credential Managerのページに行って…。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/git_windows_credential_download_1.png&#34; alt=&#34;Windows Credential Managerのページ&#34; /&gt;&lt;/p&gt;

&lt;p&gt;releaseタブからインストーラをダウンロードして…。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/git_windows_credential_download_2.png&#34; alt=&#34;ダウンロードの画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;普通にインストールしましょう。これで何も考えなくてもgitが素敵なものになります(具体的にはコマンドプロンプトでパスワードをいちいち入力しなくてもよくなる)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/git_windows_credential_license.png&#34; alt=&#34;インストール時のライセンス同意画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;では、いよいよSourceTreeのセットアップです。スタートメニューか何かからSourceTreeを実行すると初回セットアップが始まります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/sourcetree_initial_1.png&#34; alt=&#34;SourceTreeのライセンス同意画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ライセンスを読んで同意したら次はAtlassianアカウントの確認です。BitBucketなどを使っているのならそのアカウントがそのまま使えます。画像では青の矢印がアカウントを持っているときに使用するボタンです。出てきた画面で登録したときのメールアドレスとパスワードを入力しましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/sourcetree_initial_2.png&#34; alt=&#34;SourceTreeでのAtlassianアカウント入力&#34; /&gt;&lt;/p&gt;

&lt;p&gt;次はBitBucketやGitHubのアカウント登録です。ここでは何も登録せずにスキップしています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/sourcetree_initial_3.png&#34; alt=&#34;SourceTreeでのリポジトリサービスの入力&#34; /&gt;&lt;/p&gt;

&lt;p&gt;SSHキーの読みこみをするかどうか聞かれるかもしれません。GitHubでは &lt;strong&gt;SSHキーの使用は非推奨&lt;/strong&gt; なのでここでは登録しません。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/sourcetree_initial_4.png&#34; alt=&#34;SourceTreeでのSSHキーの読み込み&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最後にMercurialとGitのインストールです。インストールする場合は内蔵版をインストールすることができます。これとは別にGit等をダウンロードしてインストールすることもできます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/sourcetree_initial_5.png&#34; alt=&#34;Mercurialのインストール選択&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ついにSourceTreeが立ちあがりました。これで一段落です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/sourcetree_top.png&#34; alt=&#34;SourceTreeのトップ画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ちなみに内蔵のgitを使うか、それとも別にインストールしたgitを使うかは設定で変更できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/sourcetree_option_git_select.png&#34; alt=&#34;SourceTreeで使うGitを選択する&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;sourcetreeでbitbucketのアカウントを結びつける:224e1608373417cdc003004782236e65&#34;&gt;SourceTreeでBitbucketのアカウントを結びつける&lt;/h1&gt;

&lt;p&gt;では(Bitbucketのアカウントを持っていると仮定して)Bitbucketのアカウントを結びつけてみましょう。&lt;/p&gt;

&lt;p&gt;まず、SourceTreeのトップ画面から &lt;em&gt;新規/クローンを作成する&lt;/em&gt; を選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/sourcetree_clone_top.png&#34; alt=&#34;クローンの作成を選択&#34; /&gt;&lt;/p&gt;

&lt;p&gt;出た画面でリポジトリのURLを選択して直接手元にリポジトリをクローン(コピー)することも出来ますが、ここでは地球アイコンをクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/sourcetree_clone_select.png&#34; alt=&#34;クローンURLの指定画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;そうすると、結びつけられたアカウントでクローンできるリポジトリの一覧が表示されるのですが、まだアカウントを結びつけていないので何も表示されません。ここではアカウントを結びつけるために右上のボタンをクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/sourcetree_clone_repository.png&#34; alt=&#34;ホストされているリポジトリの一覧画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;そうするとアカウントを指定する画面が表示されるので、Bitbucketを指定してユーザー名を入力します。そして次の画面でbitbucketのパスワードを入力すれば結びつけは完了です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/sourcetree_clone_account.png&#34; alt=&#34;ホスティングアカウントの指定&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;githubアカウントの初期設定-二要素認証:224e1608373417cdc003004782236e65&#34;&gt;GitHubアカウントの初期設定(二要素認証)&lt;/h1&gt;

&lt;p&gt;この節ではアカウントを作成した後に、安心してGitHubを使用するための初期設定を解説します。&lt;/p&gt;

&lt;p&gt;まず、なんとか頑張ってGitHubのアカウントを作成しましょう。おそらくメールでの認証も必要となります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/github_create_account.png&#34; alt=&#34;GitHubアカウントの作成&#34; /&gt;&lt;/p&gt;

&lt;p&gt;さて、適当に頑張るとこんな感じの画面になります(画像は私のアカウントのトップ画面です)。右上のマークからsettingsを選択しましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/github_top.png&#34; alt=&#34;GitHubのトップ画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;GitHubでは二要素認証、つまりパスワードの他にワンタイムパスワードを用いた認証が推奨されています。この設定を行います。&lt;/p&gt;

&lt;p&gt;左側のメニューからSecurityを選択し、Two-factor authenticationをクリックしましょう。ここからの手順は&lt;a href=&#34;https://www.hde.co.jp/otp/ja/github.html&#34;&gt;他のページにも書いてあります&lt;/a&gt;が一応解説します。&lt;/p&gt;

&lt;p&gt;おそらく、次のような画面が表示されるはずです。この画面で &lt;em&gt;Set up using an app&lt;/em&gt; をクリックすると、&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;amp;hl=ja&#34;&gt;Google認証システム&lt;/a&gt;を使うためのQRコードが表示されると思います。手元のスマートフォンのGoogle認証システムアプリからアカウントを追加してQRコードを読ませてください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/github_twofactor_setting.png&#34; alt=&#34;二要素認証でアプリを使用する&#34; /&gt;&lt;/p&gt;

&lt;p&gt;なお、先の画面に書いてありますが、携帯電話のショートメッセージでワンタイムパスワードを受けとることも出来ます。&lt;/p&gt;

&lt;p&gt;設定したらリカバリーコードを表示させてどこかに控えておきましょう。これはスマホを無くすなどしてワンタイムパスワードが使えなくなった場合に使用します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/github_twofactor_recovery_code.png&#34; alt=&#34;リカバリーコードの表示画面&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;gitからgithubを扱うためのパスワード生成:224e1608373417cdc003004782236e65&#34;&gt;gitからGitHubを扱うためのパスワード生成&lt;/h1&gt;

&lt;p&gt;さて二要素認証を有効にすると、gitは通常の方法ではGitHubにプッシュ(コードを送る)することが出来なくなります。それはgitが通常はユーザーIDとパスワードの組みあわせでしか認証しないためです。ですから、gitから使用する専用のパスワードを生成します。&lt;/p&gt;

&lt;p&gt;左のメニューからPersonal Access Tokenをクリックしてください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/github_token_generate.png&#34; alt=&#34;PersonalAccessTokenの画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;私の画面では既にいくつかパスワードが生成されているのでこうなっています。新しく作成する場合にはGenerate new tokenを選択しましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/github_token_new.png&#34; alt=&#34;新規トークンの作成画面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;するとこのような画面が表示されます。ここでは新しく生成したパスワード(トークン)で何が出来るかを指定します。&lt;/p&gt;

&lt;p&gt;上の赤い枠はトークンの説明です。認証には使わないのでわかりやすい名前を付けましょう。下の赤い枠が重要でトークンを何に使うかの設定です。通常はチェックされている3つがあれば十分でしょう。&lt;/p&gt;

&lt;p&gt;さて、下の方にあるボタンをクリックすると実際にトークンが生成されます。この画像で赤く染まっている部分がそのトークンです。この画面で一度きりしか表示されないのでクリップボードにコピーするなりなんなりして保存しておきましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/github_token_complete.png&#34; alt=&#34;新規トークンの作成完了&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ここまでやれば、あとは先の手順で示したようにGitHubのアカウントを結びつければおおよそのことは出来ると思います。お疲れさまでした！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>reduxの紹介</title>
      <link>https://philmist.github.io/gbcalc_source_doc/redux_intro/</link>
      <pubDate>Sun, 03 Apr 2016 21:33:34 +0900</pubDate>
      
      <guid>https://philmist.github.io/gbcalc_source_doc/redux_intro/</guid>
      <description>

&lt;p&gt;この文書では計算機のデータを一括管理しているreduxというライブラリと
それと一緒に使っているredux-thunkというライブラリについて
解説します。&lt;/p&gt;

&lt;h1 id=&#34;reduxの短い紹介:fa15491bdd89ef0451965db73737a97a&#34;&gt;reduxの短い紹介&lt;/h1&gt;

&lt;p&gt;reduxはstate(状態)を管理するライブラリです。&lt;/p&gt;

&lt;p&gt;今回の計算機で使われているreactではstateをどこに保持するかは
コードを書く側にまかされています。
各コンポーネントは自身にstateを持つことも出来ますが、
アプリケーション全体でどこにデータを持つかは決まっていませんでした。&lt;/p&gt;

&lt;p&gt;そこで出てくるのがstateを保持するためのライブラリの1つであるreduxです。
reduxは(react-reduxという派生ライブラリと組みあわせることで)
容易にアプリケーション全体でstateを保持し、変化させ、取りだすことができるわけです。&lt;/p&gt;

&lt;h1 id=&#34;stateをどうやって扱うのか:fa15491bdd89ef0451965db73737a97a&#34;&gt;stateをどうやって扱うのか&lt;/h1&gt;

&lt;p&gt;reduxはstateを保持する部分をアプリケーション全体で持っています。
これをstoreと言います。&lt;/p&gt;

&lt;p&gt;storeで保持されているstateは基本的に読みとり専用です。
stateを変化させるにはactionと呼ばれるオブジェクト(&lt;code&gt;{}&lt;/code&gt;)を
dispatchする(dispatchと呼ばれる関数に渡す)ことで変化を依頼します。&lt;/p&gt;

&lt;p&gt;actionはreducerと呼ばれる関数にstoreに保持されている現在のstateとともに渡されます。
reducerはactionを見てstateを変化させる必要があるなら次のstateを新しく生成して返します。
そしてstateはまたstoreに保持されます。&lt;/p&gt;

&lt;p&gt;このようにしてreduxはstateを管理しています。
&lt;a href=&#34;http://redux.js.org/index.html&#34;&gt;公式の例&lt;/a&gt;がわかりやすいかと思います。&lt;/p&gt;

&lt;h2 id=&#34;reducer:fa15491bdd89ef0451965db73737a97a&#34;&gt;reducer&lt;/h2&gt;

&lt;p&gt;reducerは現在のstateとactionを渡されて、次のstateを返す関数です。
具体例を計算機のソースから持ってきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import * as RC from &amp;quot;./const/reducer_type.js&amp;quot;;

// 入力ロック状態を管理するreducer
export function inputlock_counter(state = 0, action) {
  if (action.type == RC.inputlock.INCREMENT) {
    return Number(state+1);
  } else if (action.type == RC.inputlock.DECREMENT) {
    let retval = Number(state-1);
    if (retval &amp;lt; 0) {
      console.warn(&amp;quot;Input Lock Counter is MINUS (Set to 0).&amp;quot;);
      retval = Number(0);
    }
    return retval;
  } else {
    return state;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;RC.inputlock.INCREMENT&lt;/code&gt;などは定数だと思ってください。&lt;/p&gt;

&lt;p&gt;actionは&lt;code&gt;{ type: RC.inputlock.INCREMENT }&lt;/code&gt;のようなオブジェクトです。
このようなオブジェクトをreducer達に渡された時、
&lt;code&gt;type&lt;/code&gt;を見て自分が担当のreducerとわかった時にstateを
何らかの形で変化させて返します。&lt;/p&gt;

&lt;p&gt;ただし注意が必要です。
stateを変化させた場合には &lt;strong&gt;必ず元の変数とは違う変数で返さなければならない&lt;/strong&gt; のです。
これを忘れた場合、stateが変化してもstateを見ているコンポーネントには通知されません。&lt;/p&gt;

&lt;h1 id=&#34;react-reduxの紹介:fa15491bdd89ef0451965db73737a97a&#34;&gt;react-reduxの紹介&lt;/h1&gt;

&lt;p&gt;react-reduxはreduxをreact上で簡単に使うためのライブラリです。
提供しているAPIは2つですが若干仕様が面倒です。&lt;/p&gt;

&lt;p&gt;まず1つ目は&lt;code&gt;Provider&lt;/code&gt;です。
これはreactのコンポーネントであり、
公式例によれば次のようにして画面を定義するコンポーネントを覆うことで使います。
&lt;code&gt;store&lt;/code&gt;はreduxのstoreです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ReactDOM.render(
  &amp;lt;Provider store={store}&amp;gt;
    &amp;lt;MyRootComponent /&amp;gt;
  &amp;lt;/Provider&amp;gt;,
  rootEl
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2つ目は&lt;code&gt;connect&lt;/code&gt;です。
これは
&lt;em&gt;stateを取りだしてコンポーネントのpropsとして注入するオブジェクトを返す関数&lt;/em&gt;
と
&lt;em&gt;コンポーネントのpropsに注入する「中でdispatchしていることを期待される関数」のオブジェクト&lt;/em&gt;
を引数に取ります。
2つ目はオブジェクトを返す関数を引数に取ってもかまいません。
なお、両方の引数ともオプションです。&lt;/p&gt;

&lt;p&gt;ややこしいので公式の例を使って説明します。&lt;/p&gt;

&lt;h2 id=&#34;mapstatetoprops:fa15491bdd89ef0451965db73737a97a&#34;&gt;mapStateToProps&lt;/h2&gt;

&lt;p&gt;まず1つ目は&lt;code&gt;mapStateToProps&lt;/code&gt;という名前で呼ばれる引数です。&lt;/p&gt;

&lt;p&gt;これはソースを見るとわかると思いますが、
state全体を引数として渡されて、
その中から &lt;strong&gt;必要なstateだけを取りだして&lt;/strong&gt; オブジェクトにして返すことを期待されています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function mapStateToProps(state) {
  return { todos: state.todos }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先にも書いた通り注意が必要なのは、使うstateだけを取りだすことです。
そうせずに不必要なstateまで取りだしてpropsに注入すると、
stateが更新された時にpropsが更新されて、
その際にコンポーネントが再描画されるので効率が悪くなるのです。&lt;/p&gt;

&lt;p&gt;最終的にオブジェクトとして返せば良いことになっているので、
中でstateの値を使って条件判断などをしてオブジェクトを生成してもかまいません。&lt;/p&gt;

&lt;h2 id=&#34;mapdispatchtoprops:fa15491bdd89ef0451965db73737a97a&#34;&gt;mapDispatchToProps&lt;/h2&gt;

&lt;p&gt;2つ目の引数は&lt;code&gt;mapDispatchToProps&lt;/code&gt;と呼ばれます。
この引数はオブジェクトか関数を受けとります。&lt;/p&gt;

&lt;p&gt;オブジェクトを受けとった場合、
そこで指定されている関数は
全てがaction creator(actionと呼ばれるオブジェクトを返す関数)と考えられて、
dispatchにくるんでコンポーネントのpropsに注入されます。
言いかえれば、propsに注入された関数を使うことで自動的に目的のactionがdispatchされます。&lt;/p&gt;

&lt;p&gt;関数を受けとった場合は動作が若干違います。
引数として指定された関数は、1つ目に&lt;code&gt;dispatch&lt;/code&gt;、2つ目に&lt;code&gt;ownProps&lt;/code&gt;と呼ばれる引数を受けとります。
そして引数として指定された関数は &lt;em&gt;propsに注入する関数を含んだオブジェクト&lt;/em&gt; を返すことが期待されています。
なお、&lt;code&gt;ownProps&lt;/code&gt;はオプションの引数であり受けとらなくてもかまいません。&lt;/p&gt;

&lt;h1 id=&#34;redux-thunk:fa15491bdd89ef0451965db73737a97a&#34;&gt;redux-thunk&lt;/h1&gt;

&lt;p&gt;さて、actionはdispatchされるオブジェクトだと前に書きました。
今回使っているredux-thunkとよばれるライブラリ(正確にはミドルウェア)ではこれが拡張されます。
&lt;em&gt;actionに関数を取ることが可能になる&lt;/em&gt; のです。&lt;/p&gt;

&lt;p&gt;わけがわからないと思いますが続けます。
actionに渡された関数は引数としてdispatchを受けとります。
関数は中でdispatchを使いまわすことができます。
結果として、
&lt;a href=&#34;http://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/35415559#35415559&#34;&gt;StackOverflowに投稿されている例&lt;/a&gt;
のようなことができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// actions.js

function showNotification(id, text) {
  return { type: &#39;SHOW_NOTIFICATION&#39;, id, text }
}
function hideNotification(id) {
  return { type: &#39;HIDE_NOTIFICATION&#39;, id }
}

let nextNotificationId = 0
export function showNotificationWithTimeout(text) {
  return function (dispatch) {
    const id = nextNotificationId++
    dispatch(showNotification(id, text))

    setTimeout(() =&amp;gt; {
      dispatch(hideNotification(id))
    }, 5000)
  }
}

// component.js

import { connect } from &#39;react-redux&#39;

// ...

this.props.showNotificationWithTimeout(&#39;You just logged in.&#39;)

// ...

export default connect(
  mapStateToProps,
  { showNotificationWithTimeout }
)(MyComponent)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;connectの2つ目の引数、&lt;code&gt;mapDispatchToProps&lt;/code&gt;で指定されたオブジェクトの関数は
dispatchでくるまれることを思いだしてください。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:fa15491bdd89ef0451965db73737a97a&#34;&gt;まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;reduxはstateを管理するライブラリ&lt;/li&gt;
&lt;li&gt;react-reduxをstateに繋げることで、stateの変化に応じてコンポーネントの内容を変えられる&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>reactのフォームについて</title>
      <link>https://philmist.github.io/gbcalc_source_doc/react_form/</link>
      <pubDate>Sun, 03 Apr 2016 06:13:11 +0900</pubDate>
      
      <guid>https://philmist.github.io/gbcalc_source_doc/react_form/</guid>
      <description>

&lt;p&gt;この文書ではreactのフォームについて説明します。&lt;/p&gt;

&lt;h1 id=&#34;reactのフォーム-入力欄:9d2c39216cf3ed8ce2eb85737a736479&#34;&gt;reactのフォーム(入力欄)&lt;/h1&gt;

&lt;p&gt;reactのフォームは他のコンポーネントと違って、
&lt;em&gt;ユーザーの入力で表示内容を変化させなければなりません&lt;/em&gt; 。
さもなければ入力しても表示が変化しないコンポーネントができます。&lt;/p&gt;

&lt;p&gt;reactのフォームには2種類あります。
&lt;em&gt;controlled components&lt;/em&gt; と &lt;em&gt;uncontrolled components&lt;/em&gt; です。
controlledの方は(props.)valueを要素に持ち表示/入力内容を制御できるコンポーネントで、
uncontrolledは(props.)valueを持たず全てがユーザーまかせのコンポーネントです。&lt;/p&gt;

&lt;p&gt;今回はcontrolled componentsしか使っていないのでそちらについて解説します。&lt;/p&gt;

&lt;h1 id=&#34;controlled-componentsの使い方:9d2c39216cf3ed8ce2eb85737a736479&#34;&gt;controlled componentsの使い方&lt;/h1&gt;

&lt;p&gt;まず、ざっと流れを説明します。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;フォームの&lt;code&gt;onChange&lt;/code&gt;に関数を指定する
(&lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot; onChange={なんちゃら} /&amp;gt;&lt;/code&gt;のように)&lt;/li&gt;
&lt;li&gt;onChangeで指定された関数は引数に &lt;em&gt;イベント&lt;/em&gt; を受けとる&lt;/li&gt;
&lt;li&gt;引数で受けとったイベント(&lt;code&gt;e&lt;/code&gt;としておきます)から入力された値を読みとる(&lt;code&gt;e.target.value&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;入力された値を処理してフォームの&lt;code&gt;value&lt;/code&gt;で指定された何か(stateとか)に値を設定する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;公式の例を見てみましょう。
React.createClassを使っている例なので
&lt;code&gt;onChange&lt;/code&gt;で指定された関数は&lt;code&gt;this&lt;/code&gt;が暗黙的にbindされています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;getInitialState: function() {
  return {value: &#39;Hello!&#39;};
},
handleChange: function(event) {
  this.setState({value: event.target.value});
},
render: function() {
  return (
    &amp;lt;input
      type=&amp;quot;text&amp;quot;
      value={this.state.value}
      onChange={this.handleChange}
    /&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意しなければならないのは
&lt;strong&gt;&lt;code&gt;this.props.value&lt;/code&gt;に値を指定しないと表示されている値が反映されない&lt;/strong&gt;
ということです。
これを忘れるといつまで経っても値が更新されません。&lt;/p&gt;

&lt;h1 id=&#34;子コンポーネントから親コンポーネントに値を返すという考え方:9d2c39216cf3ed8ce2eb85737a736479&#34;&gt;子コンポーネントから親コンポーネントに値を返すという考え方&lt;/h1&gt;

&lt;p&gt;このフォームのテクニックは
&lt;em&gt;子にコールバック関数を渡して親に値を渡す&lt;/em&gt;
とも考えることができます。
つまりコールバック関数を通して、
親の持っている値を変更して子に渡されるpropsを変更するのです。&lt;/p&gt;

&lt;p&gt;コールバック関数をpropsとして渡して親が値をもらうテクニックは
親から子へのデータの一方通行が基本のreactでは良く使われるので
覚えておきたいところです。&lt;/p&gt;

&lt;p&gt;もっとも、今回のソースではあまりそのやり方を使っていないのですが…。&lt;/p&gt;

&lt;h1 id=&#34;補足-uncontrolled-components:9d2c39216cf3ed8ce2eb85737a736479&#34;&gt;補足: uncontrolled components&lt;/h1&gt;

&lt;p&gt;ちなみにフォームの&lt;code&gt;value&lt;/code&gt;に何かを割り当てない場合、
それはuncontrolled componentsになります。
この場合、値を読みとるのは&lt;code&gt;onChange&lt;/code&gt;からになります。&lt;/p&gt;

&lt;p&gt;uncontrolled componentsは表示値を制御しにくくなるため今回は使っていません。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>短いreact紹介と補足</title>
      <link>https://philmist.github.io/gbcalc_source_doc/react_intro/</link>
      <pubDate>Wed, 30 Mar 2016 20:49:09 +0900</pubDate>
      
      <guid>https://philmist.github.io/gbcalc_source_doc/react_intro/</guid>
      <description>

&lt;p&gt;この文書では計算機アプリの根幹で使われているReactについて簡単に解説するとともに、
公式チュートリアルでは触れられておらず、今回使用した部分について少しだけ解説します。
なお、ちゃんとした解説は
&lt;a href=&#34;https://facebook.github.io/react/docs/tutorial-ja-JP.html&#34;&gt;公式のチュートリアル&lt;/a&gt;
を見たほうが良いです。&lt;/p&gt;

&lt;h1 id=&#34;reactとは:efcdea1de893c8cc5ea407a16f0e0934&#34;&gt;Reactとは&lt;/h1&gt;

&lt;p&gt;Reactとはhtmlな画面をいくつかの部品に分けて書くことができるライブラリです。
それだけなら単に文字列を組みあわせて表示させればいいのですが、
Reactのすごいところは &lt;strong&gt;変更された部分だけを再描画する&lt;/strong&gt; ことです。&lt;/p&gt;

&lt;p&gt;例えばある部品(コンポーネント)に何か引数を与えて描画するとします。
その時、従来の文字列を組みあわせた手法ではhtmlとして表わされた文字列を
全て変更することになってしまいます。
ですが、Reactの場合は変更された部分を計算し、
ブラウザで表示されている部分(DOMツリー)を直接いじることによって
描画を高速にできるとされています。&lt;/p&gt;

&lt;h1 id=&#34;jsxとコンポーネントとprops-プロパティ:efcdea1de893c8cc5ea407a16f0e0934&#34;&gt;JSXとコンポーネントとprops(プロパティ)&lt;/h1&gt;

&lt;p&gt;公式ページから例を引用します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var HelloMessage = React.createClass({
  render: function() {
    return &amp;lt;div&amp;gt;Hello {this.props.name}&amp;lt;/div&amp;gt;;
  }
});

ReactDOM.render(&amp;lt;HelloMessage name=&amp;quot;John&amp;quot; /&amp;gt;, mountNode);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコードではJSXというhtml(xml)に良く似た文法がJavascriptの中で使われています。
JSXはreactを楽に使うための文法です。これはコンパイラを通すことで
(おおよそ)次のように変換されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var HelloMessage = React.createClass({
  displayName: &amp;quot;HelloMessage&amp;quot;,

  render: function render() {
    return React.createElement(
      &amp;quot;div&amp;quot;,
      null,
      &amp;quot;Hello &amp;quot;,
      this.props.name
    );
  }
});

ReactDOM.render(React.createElement(HelloMessage, { name: &amp;quot;John&amp;quot; }), mountNode);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;古いJavascript(ES5)にはC++などで言うクラスは無いので、
reactはcreateClassという関数を用意しています。
こうして定義されたクラス(など)で、パラメータを与えられて
renderメソッドで &lt;em&gt;1つの&lt;/em&gt; 要素を返すものをコンポーネントと言います。&lt;/p&gt;

&lt;p&gt;reactはこういったコンポーネントを組みあわせていくことで
画面を構成していくという点が重要です。
そしてそのコンポーネントは呼びだしている要素から渡された引数を使うことで
表示を変更することができるわけです。&lt;/p&gt;

&lt;p&gt;この渡された引数のことを &lt;strong&gt;props&lt;/strong&gt; と呼びます。
propsは親(呼びだす側)から子(呼びだされる側)への一方通行で、
親が持っているデータを変更する場合には
&lt;em&gt;親からデータを変更するための関数をpropsとして渡してもらう&lt;/em&gt;
という方法をとります。&lt;/p&gt;

&lt;h1 id=&#34;state-状態:efcdea1de893c8cc5ea407a16f0e0934&#34;&gt;state(状態)&lt;/h1&gt;

&lt;p&gt;コンポーネント自身が値を保持しておきたい場合があります。
こういう場合は &lt;em&gt;state&lt;/em&gt; を利用することが可能です。
参考に公式の例を引用します。
この例での&lt;code&gt;componentDidMount&lt;/code&gt;と&lt;code&gt;componentWillUnmount&lt;/code&gt;は
描画される直前と消される直前に呼ばれる関数です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Timer = React.createClass({
  getInitialState: function() {
    return {secondsElapsed: 0};
  },
  tick: function() {
    this.setState({secondsElapsed: this.state.secondsElapsed + 1});
  },
  componentDidMount: function() {
    this.interval = setInterval(this.tick, 1000);
  },
  componentWillUnmount: function() {
    clearInterval(this.interval);
  },
  render: function() {
    return (
      &amp;lt;div&amp;gt;Seconds Elapsed: {this.state.secondsElapsed}&amp;lt;/div&amp;gt;
    );
  }
});

ReactDOM.render(&amp;lt;Timer /&amp;gt;, mountNode);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;es6のclassを使ったコンポーネントの書き方:efcdea1de893c8cc5ea407a16f0e0934&#34;&gt;ES6のclassを使ったコンポーネントの書き方&lt;/h1&gt;

&lt;p&gt;さて、計算機のコードでこういう書き方をしてもいいのですが、
(なんとなくわかりやすいので)実際にはES6のクラスを使っています。&lt;/p&gt;

&lt;p&gt;最初のこのコンポーネントを例にします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var HelloMessage = React.createClass({
  render: function() {
    return &amp;lt;div&amp;gt;Hello {this.props.name}&amp;lt;/div&amp;gt;;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これはES6のクラスを使うと次のように書けます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class HelloMessage extends React.Component {
  render() {
    return &amp;lt;div&amp;gt;Hello {this.props.name}&amp;lt;/div&amp;gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただし、この書き方をする時には注意が必要です。
&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&#34;&gt;MdNのbindの項&lt;/a&gt;
を引用します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var x = 9;
var module = {
  x: 81,
  getX: function() { return this.x; }
};

module.getX(); // 81

var getX = module.getX;
getX(); // 9, この場合 &amp;quot;this&amp;quot; はグローバルオブジェクトを参照するため

// &#39;this&#39; を module に結びつけた新しい関数を生成
var boundGetX = getX.bind(module);
boundGetX(); // 81
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これと同じ問題が先のクラスで書かれたコンポーネントにも存在します。
stateの例に挙げられていたカウンターをクラスで書きなおしたものが
react公式にあるのでそれを引用します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export class Counter extends React.Component {
  constructor(props) {
    super(props);
    this.state = {count: props.initialCount};
    this.tick = this.tick.bind(this);
  }
  tick() {
    this.setState({count: this.state.count + 1});
  }
  render() {
    return (
      &amp;lt;div onClick={this.tick}&amp;gt;
        Clicks: {this.state.count}
      &amp;lt;/div&amp;gt;
    );
  }
}
Counter.defaultProps = { initialCount: 0 };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注目したいのはconstructor(そのまんまコンストラクタ関数のことです)にある
&lt;code&gt;this.tick.bind(this)&lt;/code&gt;です。
thisは実行されている場所で変化するので、
こうやって関数をオブジェクトのthisにbindしないと悲しみを生みます。&lt;/p&gt;

&lt;p&gt;なお、コンストラクタでbindしなくとも、次のような書き方をすることも可能です。
reactのページから引用します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div onClick={this.tick.bind(this)}&amp;gt;  // ES5
&amp;lt;div onClick={() =&amp;gt; this.tick()}&amp;gt;  // ES6
&amp;lt;div onClick={::this.tick}&amp;gt;  // ES7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ES6のアロー関数はその部分でのthisを保持します( &lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/arrow_functions&#34;&gt;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/arrow_functions&lt;/a&gt; )
。&lt;/p&gt;

&lt;p&gt;最後のES7の例は
&lt;a href=&#34;https://stackoverflow.com/questions/31220078/javascript-double-colon-es7-proposal/31221199&#34;&gt;若干面倒な問題がある&lt;/a&gt;
んですが、
表記が簡単になるので活用しています。&lt;/p&gt;

&lt;h1 id=&#34;備考-さらに実行速度をあげるコンポーネントの書き方:efcdea1de893c8cc5ea407a16f0e0934&#34;&gt;備考: さらに実行速度をあげるコンポーネントの書き方&lt;/h1&gt;

&lt;p&gt;stateが必要ないコンポーネントならば、次の書き方でコンポーネントを定義できます(公式の例)。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function HelloMessage(props) {
  return &amp;lt;div&amp;gt;Hello {props.name}&amp;lt;/div&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アロー関数を使って次のようにも書けます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const HelloMessage = (props) =&amp;gt; &amp;lt;div&amp;gt;Hello {props.name}&amp;lt;/div&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;つまり、単純にpropsを受けとって要素を返す関数(関数型のオブジェクト)です。
このように書かれたコンポーネントは将来的に早くなる可能性があるそうです。
ただし、最初にも書きましたが、
stateを持つ可能性のあるコンポーネントなどはこの書き方ができません。&lt;/p&gt;

&lt;h1 id=&#34;リストとkey:efcdea1de893c8cc5ea407a16f0e0934&#34;&gt;リストとkey&lt;/h1&gt;

&lt;p&gt;リストの要素(&lt;code&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/code&gt;)などで
複数の要素を配列(ないし類似オブジェクト)として扱い、
その要素をコンポーネント内で展開できると便利なことがあります。
そのようにする場合、公式例によれば書き方は以下の通りです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var ListItemWrapper = React.createClass({
  render: function() {
    return &amp;lt;li&amp;gt;{this.props.data.text}&amp;lt;/li&amp;gt;;
  }
});
var MyComponent = React.createClass({
  render: function() {
    return (
      &amp;lt;ul&amp;gt;
        {this.props.results.map(function(result) {
           return &amp;lt;ListItemWrapper key={result.id} data={result}/&amp;gt;;
        })}
      &amp;lt;/ul&amp;gt;
    );
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;results.map()&lt;/code&gt;は&lt;code&gt;results&lt;/code&gt;が配列の時に新しい配列を作って返すための関数です。
&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/map&#34;&gt;MdNのArray.mapの説明&lt;/a&gt;を参考にしてください。&lt;/p&gt;

&lt;p&gt;重要なのは&lt;code&gt;key&lt;/code&gt;です。この場合reactは&lt;code&gt;key&lt;/code&gt;を見て要素を判別します。
&lt;code&gt;key&lt;/code&gt;は親コンポーネントが子コンポーネントの各々を判別するためにあるので、
子コンポーネント側で設定するのではなく、親コンポーネント側で設定しなければなりません
(上の例では&lt;code&gt;ListItemWrapper&lt;/code&gt;の中で指定すると失敗する)。&lt;/p&gt;

&lt;p&gt;このパターンは武器や召喚の表示などで使われています。
武器の表示部分で関連するところを(一部変更して)抜きだしてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 武器の並び全体を表わすクラス
class WeaponTableBody extends Component {
  render() {
    // weaponは配列なのでmapを使って要素を生成する
    return (
      &amp;lt;tbody&amp;gt;
        {this.props.weapon.map((val, index) =&amp;gt; { return &amp;lt;WeaponRow key={&amp;quot;wr_&amp;quot;+String(index)} index={index} /&amp;gt;; })}
      &amp;lt;/tbody&amp;gt;
    );
  }
}
// 表示に使うための変数群
const WEAPON_KIND = [
  [&amp;quot;sword&amp;quot;, &amp;quot;剣&amp;quot;],
  [&amp;quot;dagger&amp;quot;, &amp;quot;短剣&amp;quot;],
  [&amp;quot;spear&amp;quot;, &amp;quot;槍&amp;quot;],
  [&amp;quot;axe&amp;quot;, &amp;quot;斧&amp;quot;],
  [&amp;quot;stuff&amp;quot;, &amp;quot;杖&amp;quot;],
  [&amp;quot;gun&amp;quot;, &amp;quot;銃&amp;quot;],
  [&amp;quot;knuckle&amp;quot;, &amp;quot;格闘&amp;quot;],
  [&amp;quot;bow&amp;quot;, &amp;quot;弓&amp;quot;],
  [&amp;quot;instrument&amp;quot;, &amp;quot;楽器&amp;quot;],
  [&amp;quot;blade&amp;quot;, &amp;quot;刀&amp;quot;]
];
const SKILL_TYPE = [
  [&amp;quot;none&amp;quot;, &amp;quot;無し&amp;quot;],
  [&amp;quot;kj1&amp;quot;, &amp;quot;攻刃(小)&amp;quot;],
  ... // 略
];
const SKILL_LV = [
  [&amp;quot;0&amp;quot;, &amp;quot;無し&amp;quot;],
  [&amp;quot;1&amp;quot;, &amp;quot;1&amp;quot;],
  ... // 略
];
// 武器の1行を表わすコンポーネント
// フォームはControlled Componentsにしているので割と面倒くさい
class WeaponRow extends Component {
  // 武器のoptionを生成するための関数
  create_optfunc(key) {
    return (
      &amp;lt;option value={key[0]} key={key[0]}&amp;gt;{key[1]}&amp;lt;/option&amp;gt;
    );
  }

  /* 注意: クラス変数はES7の要素 */
  // 武器種別
  e_kind = WEAPON_KIND.map(this.create_optfunc);
  // スキル種別
  e_skill_type = SKILL_TYPE.map(this.create_optfunc);
  // スキルレベル
  e_skill_lv = SKILL_LV.map(this.create_optfunc);

  /* このあたりに値が変更された時に呼ばれる関数 */

  // 実際にレンダリングされる要素を返す関数
  // 名前は固定
  render() {
    // 必要な要素をpropsから変数に取りだす
    const { isDragging, index } = this.props;
    const { selected, name, atk, skill_level, skill_type, cosmos, type } = this.props;
    // つかむところに適用されるスタイルを作る
    let style_hundle = { cursor: &#39;move&#39; };
    style_hundle.color = isOver ? &amp;quot;red&amp;quot; : &amp;quot;blue&amp;quot;;
    style_hundle.color = isDragging ? &amp;quot;green&amp;quot; : style_hundle.color;
    // レンダリングされる要素を返す
    // その際、どれがドラッグ&amp;amp;ドロップの対象になるかを指定している
    return (
      &amp;lt;tr&amp;gt;
        &amp;lt;td style={ style_hundle }&amp;gt;■&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;
          &amp;lt;input type=&amp;quot;checkbox&amp;quot; className=&amp;quot;weapon_select&amp;quot; checked={selected} onChange={::this.change_select} /&amp;gt;
        &amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;
          &amp;lt;input type=&amp;quot;text&amp;quot; className=&amp;quot;weapon_name width150&amp;quot; value={name} onChange={::this.change_name} /&amp;gt;
        &amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;
          &amp;lt;input type=&amp;quot;text&amp;quot; className=&amp;quot;weapon_atk width50&amp;quot; value={atk} onChange={::this.change_atk} /&amp;gt;
        &amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;
          &amp;lt;input type=&amp;quot;checkbox&amp;quot; className=&amp;quot;cosmos&amp;quot; checked={cosmos} onChange={::this.change_cosmos} /&amp;gt;
        &amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;
          &amp;lt;select className=&amp;quot;weapon_kind&amp;quot; value={type} onChange={::this.change_kind} &amp;gt;
            {this.e_kind}
          &amp;lt;/select&amp;gt;
        &amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;
          &amp;lt;select className=&amp;quot;weapon_skill_type1&amp;quot; value={skill_type[0]} onChange={::this.change_skill_type1} &amp;gt;
            {this.e_skill_type}
          &amp;lt;/select&amp;gt;
        &amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;
          &amp;lt;select className=&amp;quot;weapon_skill_type2&amp;quot; value={skill_type[1]} onChange={::this.change_skill_type2} &amp;gt;
            {this.e_skill_type}
          &amp;lt;/select&amp;gt;
        &amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;
          &amp;lt;select className=&amp;quot;weapon_skill_lv&amp;quot; value={skill_level} onChange={::this.change_skill_lv} &amp;gt;
            {this.e_skill_lv}
          &amp;lt;/select&amp;gt;
        &amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;
          &amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;ins&amp;quot; value=&amp;quot;+&amp;quot; onClick={::this.push_insert} /&amp;gt;
          &amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;del&amp;quot; value=&amp;quot;-&amp;quot; onClick={::this.push_delete} /&amp;gt;
        &amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;render関数の最初にあるpropsのローカル変数への展開に関しては
&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&#34;&gt;MdNに説明があります&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;ソース中でも書いてありますが、クラス変数はES7からの要素なので注意してください。
ES6ではクラスを定義したあとにクラスのプロパティとして追加する
(この例では&lt;code&gt;WeaponRow.e_kind = 中身&lt;/code&gt;としなければならない)必要があります。&lt;/p&gt;

&lt;h1 id=&#34;jsx雑多なこと:efcdea1de893c8cc5ea407a16f0e0934&#34;&gt;JSX雑多なこと&lt;/h1&gt;

&lt;p&gt;JSXはhtmlではなくJavascriptのショートカット(糖衣構文)なので、
Javascriptの予約語を使えません。
そのため、見た目を指定する&lt;code&gt;class&lt;/code&gt;は&lt;code&gt;className&lt;/code&gt;と書く必要があります。&lt;/p&gt;

&lt;p&gt;他にもクリックされた時などのイベントを指定する部分は
camelCase(先頭小文字単語の区切りで大文字)を使う必要があったり、
htmlの文字実体参照(&lt;code&gt;&amp;amp;amp;&lt;/code&gt;とか)は使えなかったりなどの制限があります。&lt;/p&gt;

&lt;h1 id=&#34;フォームについて:efcdea1de893c8cc5ea407a16f0e0934&#34;&gt;フォームについて&lt;/h1&gt;

&lt;p&gt;reactのフォームについては面倒な部分が多いので&lt;a href=&#34;https://philmist.github.io/gbcalc_source_doc/react_form&#34;&gt;別の文書&lt;/a&gt;で説明します。&lt;/p&gt;

&lt;h1 id=&#34;まとめ:efcdea1de893c8cc5ea407a16f0e0934&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;reactを使う点で重要なのは以下です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reactはコンポーネントの組みあわせで画面を描画する&lt;/li&gt;
&lt;li&gt;データはpropsを通した親から子への一方通行&lt;/li&gt;
&lt;li&gt;子コンポーネントは親コンポーネントに要素を1つしか返せない(&lt;code&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/code&gt;は不可)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これだけ覚えておくと全体の理解が早くなると思います。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>