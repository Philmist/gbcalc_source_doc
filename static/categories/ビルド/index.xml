<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ビルド on グラブル計算機の読み方</title>
    <link>https://philmist.github.io/gbcalc_source_doc/categories/%E3%83%93%E3%83%AB%E3%83%89/</link>
    <description>Recent content in ビルド on グラブル計算機の読み方</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 30 Mar 2016 11:48:45 +0900</lastBuildDate>
    <atom:link href="https://philmist.github.io/gbcalc_source_doc/categories/%E3%83%93%E3%83%AB%E3%83%89/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ビルドで何をしているか</title>
      <link>https://philmist.github.io/gbcalc_source_doc/build_detail/</link>
      <pubDate>Wed, 30 Mar 2016 11:48:45 +0900</pubDate>
      
      <guid>https://philmist.github.io/gbcalc_source_doc/build_detail/</guid>
      <description>

&lt;p&gt;この文書では &lt;em&gt;ビルド&lt;/em&gt; で実際はいったい何をしているのかを解説します。&lt;/p&gt;

&lt;h1 id=&#34;コードの分割-commonjsのやり方とes6のやり方:c148923e9003c2cad40a9cc8672acac8&#34;&gt;コードの分割、CommonJSのやり方とES6のやり方&lt;/h1&gt;

&lt;p&gt;コンパイル型の言語、たとえばC++ではコードを分割して書いたのち、
最終的に &lt;em&gt;コンパイル&lt;/em&gt; と &lt;em&gt;リンク&lt;/em&gt; をしてひとつの生成物にしています。&lt;/p&gt;

&lt;p&gt;Javascriptでも同じことが行なえます。
そのうちのリンク、つまり複数のものをひとつにまとめるツールを &lt;em&gt;bundler&lt;/em&gt; と呼んでいます。
bundlerで有名なツールには&lt;code&gt;browserify&lt;/code&gt;と&lt;code&gt;webpack&lt;/code&gt;の2つがあって
どちらも人気があるようですが、
私は&lt;code&gt;webpack&lt;/code&gt;の方を選びました。&lt;/p&gt;

&lt;p&gt;ところで&lt;code&gt;webpack&lt;/code&gt;を使って、
あるコードから別のファイルにあるコードを読みこむときにはいくつかの方法があります。
そのうち2つを今回のコードでは使っています。&lt;/p&gt;

&lt;p&gt;1つは&lt;code&gt;CommonJS&lt;/code&gt;のやり方です。これは&lt;code&gt;module.exports&lt;/code&gt;と&lt;code&gt;require&lt;/code&gt;を使います。
&lt;code&gt;module.exports&lt;/code&gt;に外へ出したいもの(変数とかオブジェクトとか)を代入すると、
&lt;code&gt;require&lt;/code&gt;を使って出されたものを参照できます。
例を示します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// hello.js
var Hello = &amp;quot;Hello!&amp;quot;;
module.exports = Hello;

// world.js
var Hello = require(&amp;quot;./hello&amp;quot;);
console.log(Hello + &amp;quot;World!&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もう1つは&lt;code&gt;ES6&lt;/code&gt;(&lt;code&gt;ES2015&lt;/code&gt;)のやり方です。
&lt;code&gt;ES6&lt;/code&gt;という名称は&lt;code&gt;ECMAScript&lt;/code&gt;の第6版ということから来ています。
これは&lt;code&gt;import&lt;/code&gt;と&lt;code&gt;export&lt;/code&gt;を使います。&lt;/p&gt;

&lt;p&gt;まず、単純な例から。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// hello.js
export var Hello = &amp;quot;Hello!&amp;quot;;

// world.js
import { Hello } from &amp;quot;./hello&amp;quot;;
console.log(Hello + &amp;quot;World!&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちょっと難しい例。
&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Statements/import&#34;&gt;MDNのimport&lt;/a&gt;
を見ながらどうぞ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// hello.js
export var Hello = &amp;quot;Hello!&amp;quot;;

// world.js
export default function print_world(s) {
  console.log(s + &amp;quot;World!&amp;quot;);
}

// print.js
import * as H from &amp;quot;./hello&amp;quot;;
import world from &amp;quot;./world&amp;quot;;

world(H.Hello);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;jsx-es6-7-そしてbabel:c148923e9003c2cad40a9cc8672acac8&#34;&gt;JSX、ES6/7、そしてBabel&lt;/h1&gt;

&lt;p&gt;リンクに相当する&lt;code&gt;bundler&lt;/code&gt;については説明しました。
今度はコンパイルについて説明します。&lt;/p&gt;

&lt;p&gt;今回使用しているreactというライブラリでは&lt;code&gt;JSX&lt;/code&gt;という文法が推奨されています。
これは次のようにXMLっぽい構文をJavascriptに紛れこませられるものです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class PlayerStats extends Component {
  render() {
    return (
      &amp;lt;table className=&amp;quot;grbr&amp;quot; id=&amp;quot;info_table&amp;quot;&amp;gt;
        &amp;lt;tbody&amp;gt;
          &amp;lt;Rank /&amp;gt;
          &amp;lt;ShipBonus /&amp;gt;
          &amp;lt;AttributeBonus /&amp;gt;
          &amp;lt;HPPercent /&amp;gt;
        &amp;lt;/tbody&amp;gt;
      &amp;lt;/table&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もちろん、こんな構文をブラウザが理解できるわけがありません。
そこで必要なのが &lt;em&gt;コンパイラ&lt;/em&gt; です。
コンパイラはこのような構文をブラウザが解釈できる構文に変換します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Babel&lt;/code&gt;というコンパイラは、
まだブラウザで実装されていないけれど最新の仕様では実装されている(&lt;code&gt;ES6&lt;/code&gt;とか&lt;code&gt;ES7&lt;/code&gt;)、
というような構文を対象のブラウザが解釈できる構文に変換することも出来ます。
&lt;code&gt;Babel&lt;/code&gt;は&lt;code&gt;webpack&lt;/code&gt;から呼びだして実行することが可能なので、私はそうしています。&lt;/p&gt;

&lt;h1 id=&#34;結局webpackは何をしているか:c148923e9003c2cad40a9cc8672acac8&#34;&gt;結局webpackは何をしているか&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;webpack&lt;/code&gt;それ自体はリンクとコンパイルをしています。つまり次のようなことをしています。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;エントリポイントとして指定されたJavascriptファイルを探す&lt;/li&gt;
&lt;li&gt;指定されたファイルから呼びだされているファイルを順々に探す&lt;/li&gt;
&lt;li&gt;Javascriptファイルを&lt;code&gt;Babel&lt;/code&gt;(正確には&lt;code&gt;babel-loader&lt;/code&gt;)に渡してコンパイルする&lt;/li&gt;
&lt;li&gt;全てのファイルを1つにまとめる&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;こうすることで、好きな構文を使って色々なブラウザで動くJavascriptを簡単に書けるわけです。&lt;/p&gt;

&lt;p&gt;なお、&lt;code&gt;webpack&lt;/code&gt;の設定ファイルは&lt;code&gt;webpack.config.js&lt;/code&gt;になります。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ビルドの仕方</title>
      <link>https://philmist.github.io/gbcalc_source_doc/howtobuild/</link>
      <pubDate>Tue, 29 Mar 2016 17:14:17 +0900</pubDate>
      
      <guid>https://philmist.github.io/gbcalc_source_doc/howtobuild/</guid>
      <description>

&lt;p&gt;ここではソースから実際に見るhtmlへと変換する(ビルドする)ための手順を
解説します。&lt;/p&gt;

&lt;h1 id=&#34;ビルドとは:7c6c273796fe645f68a161a205352fe1&#34;&gt;ビルドとは&lt;/h1&gt;

&lt;p&gt;最近のJavascript、つまりは &lt;em&gt;ECMAScript&lt;/em&gt; のことですが、
以下のような手順を踏んで最終的に見るべきコンテンツが生成されるようです。
この手順をビルドと私はとりあえず呼んでいます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ライブラリをたくさんローカルにインストールする&lt;/li&gt;
&lt;li&gt;複数のスクリプトを書く&lt;/li&gt;
&lt;li&gt;スクリプトからスクリプトを呼びだしたりする&lt;/li&gt;
&lt;li&gt;htmlファイルから呼びだすスクリプトを1つにまとめる&lt;/li&gt;
&lt;li&gt;htmlファイルを書く&lt;/li&gt;
&lt;li&gt;???&lt;/li&gt;
&lt;li&gt;PROFIT&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;複数のスクリプトを1つにまとめるためのソフトを &lt;strong&gt;bundler&lt;/strong&gt; と
呼んでいるようです。
bundlerがあるとスクリプトからスクリプトを呼びだすことが非常に簡単になります。&lt;/p&gt;

&lt;p&gt;以下の説明は全てWindowsが前提です。&lt;/p&gt;

&lt;h1 id=&#34;ビルドのやり方:7c6c273796fe645f68a161a205352fe1&#34;&gt;ビルドのやり方&lt;/h1&gt;

&lt;p&gt;同梱した&lt;code&gt;readme.md&lt;/code&gt;にも書いてありますが
もう少し詳細に解説します。&lt;/p&gt;

&lt;h2 id=&#34;全ての前提-node-jsとnpm:7c6c273796fe645f68a161a205352fe1&#34;&gt;全ての前提: node.jsとnpm&lt;/h2&gt;

&lt;p&gt;ライブラリをインストールしたりツールを動かしたりするために必要となるソフトがあります。
それが &lt;strong&gt;&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;node.js&lt;/a&gt;&lt;/strong&gt; です。&lt;/p&gt;

&lt;p&gt;node.jsはJavascriptをコマンドラインで動かすための&lt;code&gt;node&lt;/code&gt;コマンドと、
Javascriptのライブラリをインストールするための&lt;code&gt;npm&lt;/code&gt;コマンドが含まれています。&lt;/p&gt;

&lt;p&gt;今回は&lt;code&gt;node&lt;/code&gt;コマンドを直接には使いませんが、
&lt;code&gt;npm&lt;/code&gt;だけは各種ライブラリをインストールするのに使います。&lt;/p&gt;

&lt;p&gt;ダウンロードページは英語ですが気合でインストールしてください。&lt;/p&gt;

&lt;p&gt;気合が入ると(インストールされると)、&lt;code&gt;node&lt;/code&gt;コマンドと&lt;code&gt;npm&lt;/code&gt;コマンドが使えるようになります。
以下のようにしてインストールされたことを確認できます。
先頭の&lt;code&gt;&amp;gt;&lt;/code&gt;はコマンドプロンプトそれ自体の表示だと思ってください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; node --version
&amp;gt; npm --version
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;他にコマンドラインで使うものをインストールする:7c6c273796fe645f68a161a205352fe1&#34;&gt;他にコマンドラインで使うものをインストールする&lt;/h2&gt;

&lt;p&gt;他にコマンドラインから直接使いたいツールの1つは、
先に説明したbundlerの1つである &lt;strong&gt;Webpack&lt;/strong&gt; です。
他にもbundlerはあるのですが(browserify)、
Webpackの方が現在は人気があるようなのでこちらを使います。&lt;/p&gt;

&lt;p&gt;Webpackは現在ベータの &lt;strong&gt;Webpack2&lt;/strong&gt; 系を使います。
管理者権限があるコマンドプロンプト上で次のコマンドを入力してください。
こうすることで&lt;code&gt;webpack&lt;/code&gt;コマンドが全体で使えるようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; npm install -g webpack@^2.1.0-beta
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;他にインストールしておきたいツールはWebpackの関連ツールである
&lt;strong&gt;webpack-dev-server&lt;/strong&gt; です。
同梱のソースはFirefoxだとそのまま動くのですが、
Chromeのようなブラウザだと
(FetchAPIがローカルからの読みこみをデフォルトでは許可してくれないので)
若干動かすのが面倒になります。&lt;/p&gt;

&lt;p&gt;そこで役に立つのがwebpack-dev-serverです。
このツールは &lt;em&gt;ローカルで簡単なHTTPサーバーを動かす&lt;/em&gt; ツールです。
これがあることでChromeのようなブラウザも
サーバーからの読みこみとして解釈してくれるようになります。&lt;/p&gt;

&lt;p&gt;インストール方法は以下の通りです。
やっぱり管理者権限のあるコマンドプロンプトで入力してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; npm install -g webpack-dev-server@^2.0.0-beta
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ライブラリをプロジェクトディレクトリにインストールする:7c6c273796fe645f68a161a205352fe1&#34;&gt;ライブラリをプロジェクトディレクトリにインストールする&lt;/h2&gt;

&lt;p&gt;さて、ソースはどこかに展開されているでしょうか。
そのソースのディレクトリに移動して(&lt;code&gt;cd&lt;/code&gt;して)、
コマンドプロンプトで次のコマンドを入力しましょう。
今度は &lt;em&gt;管理者権限ではない&lt;/em&gt; 通常のコマンドプロンプトで入力してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコマンドはディレクトリにある&lt;code&gt;package.json&lt;/code&gt;ファイルを参照して、
&lt;code&gt;node_modules&lt;/code&gt;ディレクトリに必要なライブラリ一式をインストールするための
コマンドです。
ライブラリ自体の数はそこそこなのですが、
依存するライブラリがかなり多いのでお茶でも飲みながらお待ちください。&lt;/p&gt;

&lt;h2 id=&#34;ビルドする:7c6c273796fe645f68a161a205352fe1&#34;&gt;ビルドする&lt;/h2&gt;

&lt;p&gt;ライブラリのインストールは終わったでしょうか。最後はビルドです。&lt;/p&gt;

&lt;p&gt;次のコマンドを通常のコマンドプロンプトで入力すればビルドが始まります。
だいたい40秒くらいかかるのでのんびりお待ちください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; webpack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/webpack_built.png&#34; alt=&#34;webpackの実行結果&#34; /&gt;&lt;/p&gt;

&lt;p&gt;これであとは&lt;code&gt;calc.html&lt;/code&gt;と&lt;code&gt;test.html&lt;/code&gt;を開けば目的のものが表示される…&lt;/p&gt;

&lt;h2 id=&#34;toc_6:7c6c273796fe645f68a161a205352fe1&#34;&gt;???&lt;/h2&gt;

&lt;p&gt;はずでした。&lt;/p&gt;

&lt;p&gt;先にも書きましたが、
Chromeを含む一部のブラウザはローカルからのファイル読みこみを
デフォルトでは許可していません。
そのため、今回のような &lt;em&gt;ローカルからFetchAPIを使って読みこみする&lt;/em&gt; 場合には
Chromeでは正常に表示することができません。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/chrome_local_failed.png&#34; alt=&#34;chromeでローカルファイルを表示した結果&#34; /&gt;&lt;/p&gt;

&lt;p&gt;そこで使うのが &lt;strong&gt;webpack-dev-server&lt;/strong&gt; です。
このツールは先にも説明した通りローカルに小さな開発用Webサーバーを立ちあげるのですが、
他にも素晴らしいことに &lt;strong&gt;ホットリロード&lt;/strong&gt; に対応しているのです。&lt;/p&gt;

&lt;p&gt;ホットリロードとは何か。
ビルドには直接関係ないのですが、今回の例で言うとそれは
&lt;strong&gt;ファイルを変更して保存すると自動的にビルドして画面をリロードする仕組み&lt;/strong&gt;
です。&lt;/p&gt;

&lt;p&gt;では実際に実行してみましょう。プロジェクトのルートディレクトリで以下のコマンドを実行してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; webpack-dev-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このコマンドはデフォルトだと&lt;code&gt;localhost:8080&lt;/code&gt;にサーバーを立ちあげます。
次のように色々表示された最後に&lt;code&gt;webpack: bundle is now VALID&lt;/code&gt;と表示されたら、
&lt;code&gt;http://localhost:8080/calc.html&lt;/code&gt;を開いてみてください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/webpack_dev_server_valid.png&#34; alt=&#34;開発用サーバーのコマンドプロンプト&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;profit:7c6c273796fe645f68a161a205352fe1&#34;&gt;PROFIT!&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://philmist.github.io/gbcalc_source_doc/img/webpack_display_result.png&#34; alt=&#34;Chromiumでの表示&#34; /&gt;&lt;/p&gt;

&lt;p&gt;このようにChromeで表示できました。
無事ここまで出来たのなら、おめでとうございます!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>